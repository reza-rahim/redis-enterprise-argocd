apiVersion: v1
kind: ConfigMap
metadata:
  name: flask-redis-app
data:
  app.py: |
    from flask import Flask, request, jsonify
    import redis
    import ssl
    import os

    app = Flask(__name__)

    @app.route('/probe')
    def probe():
        host = request.args.get('host')
        port = request.args.get('port', type=int, default=6379)
        tls = request.args.get('tls', 'false').lower() == 'true'

        if not host:
            return jsonify({'error': 'Missing required parameter: host'}), 400

        redis_username = os.getenv('HEATHCHECK_USERNAME')
        redis_password = os.getenv('HEATHCHECK_PASSWORD')

        if not redis_username or not redis_password:
            return jsonify({'error': 'Missing Redis credentials in environment'}), 500

        try:
            connection_kwargs = {
                'host': host,
                'port': port,
                'username': redis_username,
                'password': redis_password,
                'decode_responses': True
            }

            if tls:
                ssl_context = ssl.create_default_context()
                ssl_context.check_hostname = False
                ssl_context.verify_mode = ssl.CERT_NONE
                connection_kwargs['ssl'] = True
                connection_kwargs['ssl_context'] = ssl_context

            r = redis.Redis(**connection_kwargs)

            results = {}
            for i in range(10):
                key = f"xxxxxxx{i}"
                results[key] = r.get(key)
                
            return jsonify({'status': 'ok', 'results': results}), 200

        except Exception as e:
            return jsonify({'status': 'error', 'message': str(e)}), 500

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=5000)
